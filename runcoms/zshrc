#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customization from here:
if [ -f ~/.bashrc ]; then
    emulate sh -c 'source ~/.bashrc'
fi

autoload -Uz promptinit
promptinit
prompt agnoster

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

prompt_context() {
  prompt_segment $PRIMARY_FG default  "  ðŸ”¥  "
}
########################
# ALIASES              #
########################

alias ls='ls -lah --color=auto'
alias k='kubectl'

########################
# FUNCTIONS            #
########################

oct() {
    stat -f %Mp%Lp $1
}

work() {
    git remote | grep -q 'upstream'
    containsUpstream=$?

    # Allows passing in branch name, other wise defaults to epoch time
    branchName=${1:-$(date +%s)}

    if [ $containsUpstream -ne 0 ]
    then
        echo "Working directly on origin"
        git fetch origin
        git reset --hard origin/master
        # checkout if branch exists otherwise create it
        git checkout $branchName 2>/dev/null || git checkout -b $branchName --track
        code .
    else
        echo "Working with a forked repository"
        git fetch upstream
        git rebase upstream/master
        # checkout if branch exists otherwise create it
        git checkout $branchName 2>/dev/null || git checkout -b $branchName --track
        code .
    fi
}

pull () {
    git push -u
    PRRESULT=$(hub pull-request -m "$1")
    echo $PRRESULT
    echo "$PRRESULT => $1" | pbcopy
}

lock () {
  open -a ScreenSaverEngine
}

dockerimagesrm() {
    docker rmi $(docker images -a | grep $1 | awk '{print $1}') --force
}

dockerbash() {
    docker run --rm -it --entrypoint /bin/bash $1
}

dockerbashmount() {
    docker run --rm -it -v $PWD:/mnt --volume $SSH_AUTH_SOCK:/ssh-agent --env SSH_AUTH_SOCK=/ssh-agent --entrypoint /bin/bash $1
}

dockersh() {
    docker run --rm -it --entrypoint /bin/sh $1
}

########################
# PYENV                #
########################

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

########################
# PIPENV               #
########################

# tell pipenv to store virtualenv inside project directories
export PIPENV_VENV_IN_PROJECT=true

# Broken with Python Update
eval "$(pipenv --completion)"

########################
# DIRENV               #
########################

eval "$(direnv hook zsh)"

# Python Bin
export PATH=$PATH:~/.local/bin

########################
# GOLANG               #
########################
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
# vg https://github.com/GetStream/vg
command -v vg >/dev/null 2>&1 && eval "$(vg eval --shell zsh)"

########################
# AWS HELPERS          #
########################

function aws-personal() {
        export AWS_SHARED_CREDENTIALS_FILE="~/.aws/credentials_personal"
        export AWS_CONFIG_FILE="~/.aws/config_personal"
        export AWS_PROFILE=personal
}

########################
# REPLACEMENT TOOLS    #
########################

alias cat='bat'
alias ping='prettyping --nolegend'

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export EDITOR=vim

########################
# SECRETS              #
########################

if [ -f .env ]; then
    source .env
fi

########################
# DATADOG              #
########################

if [ -f .datadogrc ]; then
    source .datadogrc
fi

########################
# DIRCOLOR             #
########################
eval $(dircolors -b $HOME/.zprezto/custom/.dircolors)
